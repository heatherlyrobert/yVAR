.TH yVAR· 3 2008-jul "linux" "interfacing with full library version"

.SH NAME
yVAR \- simple, consistent, reusable variable testing services

.SH PATRON
keres-psychostasia (judgement) spirits of violent death, choosing righteous

.SH IMAGERY
fanged, taloned women in bloody garments, flying over the battlefield

.SH SUMMARY (see yVAR (7) for more information)
yVAR is a set of shared functions for variable existance, typing, and value
testing services for use by the calling program, making a tedious and neglected
task into a systematic, shared, easy to maintain, and safer one.

.SH SERIOUS FOREWARNING
i am a crazy, selfish, dog-fooding c-programmer.  my code tends to be
experimental and constantly evolving.  my point is NOT to be the best, it is
to challenge myself, build from scratch, and allow fast problem solving.

.SH DOCUMENTATION
.nf
.B yVAR (3)´´´´´´´´´´´interfacing with yVAR in general
yVAR_char (3)      character value testing
yVAR_int (3)       integer value testing
yVAR_real (3)      floating point value testing
yVAR_point (3)     void pointer value testing
yVAR_string (3)    character string testing
yVAR_round (3)     specialized rounding inside strings
yVAR_regex (3)     compares string to regular expressions
yVAR (7)           decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) overview        quick summary
b) synopsis        function overview
c) shared funcs    non-specific functions

.SH A) OVERVIEW
this file is simply the center point for the documentation -- all real
explanation happens in the variout sub-mans shown in DOCUMENTATION.  below
is simply the overall elements.

.SH B) SYNOPSIS
.nf
char    *yVAR_version  (void)
char     yVAR_results  (char* <exp>, char* <act>, char* <mod>)
char     yVAR_fancy    (char* <fexp>, char* <fact>)

.SH C) SHARED FUNCTIONS
there are two shared functions

.SS yVAR_version (void)
this returns the current version number and description.

.SS yVAR_results (char* <exp>, char* <act>, char* <mod>)
this returns the expected results and actual results as strings.  in the
case of an "equal" comparision, is also returns a string pointing out
the character position that did not match to speed debuggind.

.sp
.B yVAR_regex,
takes a test type and one values, actual.   the test type
identifies the preprogrammed regex string and must be one of the following...
   1 ) strg_alnum     : string must be only letters and numbers
   2 ) strg_basic     : strg_alnum, plus dash, underscore, and space
   3 ) strg_punct     : strg_basic, plus normal writing punctuation
   4 ) strg_punct     : strg_basic, plus some descriptive punctuation
   5 ) post_field     : valid cgi-post field name
   6 ) post_string    : valid cgi_post full string input
   7 ) intg_byte      : valid integer value (0 - 255)
   8 ) intg_unsign    : valid unsigned integer
   9 ) intg_sign      : valid signed integer
   10) real_float     : valid floating point value
   11) real_pct       : valid floating point percentage
   12) addr_ip        : valid ip4 address
   13) addr_email     : valid email address
   14) addr_dir       : valid linux directory name
   15) addr_file      : valid linux file name
   16) addr_phone     : valid us phone number
   17) addr_zip       : valid us zip code
   18) arch_prefix    : valid heatherly document archive prefix
   19) arch_index     : valid heatherly document archive index
   20) arch_desc      : valid heatherly document archive description
   21) prog_var       : valid c-style variable name
   22) prog_myvar     : valid c-style variable name (my variation)
   23) prog_myconst   : valid c-style constant name (my variation)
   24) prog_func      : valid c-style function name
   25) path_norm      : valid linux full path name
   26) path_tight     : valid linux full path name (my variation)

.sp
.B yVAR_hex,
takes a range and two values, expected and actual.   the range indicates
how far apart the two values may be an still match, i.e., +/- range
.sp

.SH BUGS
yENV is incredibly stable for me, but if anyone else used it it might explode
and take the universe with it.

.SH COLOPHON
this page is part of a documentation package meant to make the use of the
heatherly tools easier and faster
   


