.TH yVAR_char· 3 2008-jul "linux" "interfacing with full library version"

.SH NAME
yVAR \- simple, consistent, reusable variable testing services

.SH PATRON
keres-psychostasia (judgement) spirits of violent death, choosing righteous

.SH IMAGERY
fanged, taloned women in bloody garments, flying over the battlefield

.SH SUMMARY (see yLOG (7) for more information)
yVAR is a set of shared functions for variable existance, typing, and value
testing services for use by the calling program, making a tedious and neglected
task into a systematic, shared, easy to maintain, and safer one.

.SH SERIOUS FOREWARNING
i am a crazy, selfish, dog-fooding c-programmer.  my code tends to be
experimental and constantly evolving.  my point is NOT to be the best, it is
to challenge myself, build from scratch, and allow fast problem solving.

.SH DOCUMENTATION
.nf
yVAR (3)           interfacing with yLOG in general
.B yVAR_char (3)´´´´´´character testing
yVAR (7)           decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) overview        quick summary
b) synopsis        function overview
c) tests           specific tests provided
d) results         return codes

.SH A) OVERVIEW
yVAR char follows the same general guidelines as all others, except solely
focused on 8-bit characters, mostly for unit testing purposes.

.SH B) SYNOPSIS
int      yLOG_char    (char* <test>, char <expect>, char <actual>)

.SH C) TESTS
tests are requested by their name (not number) being passed in the <test>
arguement.  they all being with "c_" to make using them in koios (unit testing)
more clear.  in testing, c_equal is +95% of the usage.

.SS majority
.nf
---···--name---·······---description---------------------------------
1     c_equal         expected and actual match
2     c_not           expected and actual are not the same
3     c_greater       actual sorts greater than expected
4     c_gequal        actual sorts greater than (or equal to) expected
5     c_lesser        actual sorts lesser than expected
6     c_lequal        actual sorts lesser than (or equal to) expected

.SS common sub-sets
.nf
---···--name---·······---description---------------------------------
7     c_number        actual is digit (0-9)
8     c_lower         actual is lower case letter
9     c_upper         actual is upper case letter
10    c_greek         actual is greek letter

.SS less common sub-sets
.nf
---···--name---·······---description---------------------------------
11    c_alpha         actual is alpha or numeric
12    c_alnum         actual is alpha or numeric
13    c_write         actual is normal english writing character
14    c_extend        actual is extended english writing
15    c_files         actual is legal file name character
16    c_control       actual is control character
18    c_core          actual is 7-bit, non-control (32-126)
17    c_print         actual is printable character (32-126,161-255)

.SS encoding
.nf
---···--name---·······---description---------------------------------
19    c_binary        actual is binary number (01-Ï'+)
20    c_octal         actual is octal number (0-7)
21    c_hex           actual is hex number (0-9A-Fa-f)

.SH D) RESULTS
the return code is a little intelligent to help with testing the yVAR_char
function itself.  but, there are three meaningful returns...
   pos    matches requested test
   neg    fails requested test
   ?      means unknown test

.SH BUGS
yENV is incredibly stable for me, but if anyone else used it it might explode
and take the universe with it.

.SH COLOPHON
this page is part of a documentation package meant to make the use of the
heatherly tools easier and faster
